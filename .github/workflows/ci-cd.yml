name: CI/CD Pipeline Cloud DevOps App

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  REGISTRY: docker.io
  CLIENT_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/deploy-terraform-cd-client
  SERVER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/deploy-terraform-cd-server

jobs:

  # ✅ JOB 1 — CI : Build + Test
  ci:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install server dependencies
        run: |
          cd server
          npm install

      - name: 📦 Install client dependencies
        run: |
          cd client
          npm install

      - name: 🏗️ Build client
        run: |
          cd client
          npm run build

  # ✅ JOB 2 — Docker : Build & Push images
  docker:
    name: 🐳 Build & Push Docker Images
    needs: ci
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Set image version
        id: version
        run: echo "version=v1.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: 🏗️ Build & Push Client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.CLIENT_IMAGE }}:latest
            ${{ env.CLIENT_IMAGE }}:${{ steps.version.outputs.version }}

      - name: 🏗️ Build & Push Server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:latest
            ${{ env.SERVER_IMAGE }}:${{ steps.version.outputs.version }}

  # ✅ JOB 3 — Terraform Deploy
  deploy:
    name: 🚀 Terraform Deploy
    needs: docker
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::908027392248:role/deploy-terraform
          aws-region: eu-west-1
          audience: sts.amazonaws.com

      - name: ⛏️ Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: 📦 Terraform Init
        run: terraform init -reconfigure

      - name: 📌 Apply ECS Task Definition only
        env:
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_client_image_tag: v1.0.${{ github.run_number }}
          TF_VAR_server_image_tag: v1.0.${{ github.run_number }}
        run: terraform apply -target=aws_ecs_task_definition.app_task --auto-approve

      - name: 💤 Wait for ECS task registration
        run: sleep 20

      - name: 🚀 Apply full Terraform infrastructure
        run: terraform apply --auto-approve

      - name: 🌐 Show ALB URL
        run: |
          echo "ALB URL: http://$(terraform output -raw alb_dns_name || echo 'non disponible')"


  # destroy:
  #   if: github.event.inputs.destroy == 'true'
  #   name: 🗑️ Destroy infrastructure
  #   runs-on: ubuntu-latest
  #   environment: production
  #   defaults:
  #     run:
  #       working-directory: ./infra

  #   steps:
  #     - name: ⬇️ Checkout code
  #       uses: actions/checkout@v4

  #     - name: ⚙️ Configure AWS credentials (OIDC)
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::908027392248:role/deploy-terraform
  #         aws-region: eu-west-1
  #         audience: sts.amazonaws.com

  #     - name: ⛏️ Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.6.0

  #     - name: 🧨 Terraform Init
  #       run: terraform init -reconfigure

  #     - name: 🧨 Plan destroy
  #       run: terraform plan -destroy -out=destroy.tfplan

  #     - name: 🧨 Apply destroy
  #       run: terraform apply -auto-approve destroy.tfplan

  #     - name: ✅ Destroy complete
  #       run: echo "Infrastructure détruite avec succès ✅"
