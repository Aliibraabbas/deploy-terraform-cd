name: CI/CD Pipeline - Cloud DevOps

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy infrastructure (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  REGISTRY: docker.io
  CLIENT_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/deploy-terraform-cd-client
  SERVER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/deploy-terraform-cd-server

jobs:
  # --- Build & Test Client ---
  build-test:
    name: 🧪 Build & Test Client
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Install client dependencies
        run: |
          cd client
          npm install

      - name: 🔧 Build client
        run: |
          cd client
          npm run build

  # --- Docker Build & Push ---
  docker:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏷️ Set image version
        id: version
        run: echo "version=v1.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT

      - name: 🏗️ Build & Push Client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.CLIENT_IMAGE }}:latest
            ${{ env.CLIENT_IMAGE }}:${{ steps.version.outputs.version }}

      - name: 🏗️ Build & Push Server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ env.SERVER_IMAGE }}:latest
            ${{ env.SERVER_IMAGE }}:${{ steps.version.outputs.version }}

  # --- Terraform Deploy ---
  deploy:
    name: 📦 Terraform Deploy
    runs-on: ubuntu-latest
    needs: docker
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::908027392248:role/deploy-terraform
          aws-region: eu-west-1
          audience: sts.amazonaws.com

      - name: 🔍 Debug AWS identity
        run: aws sts get-caller-identity

      - name: ⛏️ Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: 📦 Terraform Init
        run: terraform init -reconfigure

      - name: 📌 Apply Task Definition ONLY
        env:
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_client_image_tag: v1.0.${{ github.run_number }}
          TF_VAR_server_image_tag: v1.0.${{ github.run_number }}
        run: terraform apply -target=aws_ecs_task_definition.app_task --auto-approve

      - name: 💤 Wait for ECS Task Definition registration
        run: sleep 20

      - name: 🚀 Apply full infrastructure
        run: terraform apply --auto-approve

      - name: ✅ Afficher l'URL ALB
        run: |
          echo "URL ALB: http://$(terraform output -raw alb_dns_name || echo 'non disponible')"

  # --- Destroy Infrastructure (Manual Only) ---
  # destroy:
  #   name: ☠️ Destroy Infrastructure
  #   if: github.event.inputs.destroy == 'true'
  #   runs-on: ubuntu-latest
  #   environment: production
  #   defaults:
  #     run:
  #       working-directory: ./infra

  #   steps:
  #     - name: 📥 Checkout repository
  #       uses: actions/checkout@v4

  #     - name: ⚙️ Configure AWS credentials via OIDC
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::908027392248:role/deploy-terraform
  #         aws-region: eu-west-1
  #         audience: sts.amazonaws.com

  #     - name: ⛏️ Setup Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: 1.6.0

  #     - name: 🔄 Terraform Init
  #       run: terraform init -reconfigure

  #     - name: 🧨 Terraform Plan Destroy
  #       run: terraform plan -destroy -out=destroy.tfplan

  #     - name: 🗑️ Terraform Destroy
  #       run: terraform apply -auto-approve destroy.tfplan
